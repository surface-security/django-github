# Generated by Django 3.2.18 on 2023-04-16 13:19

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import fernet_fields.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tla', models.CharField(blank=True, db_index=True, max_length=128, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Integration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('actions', models.JSONField()),
                ('secrets', fernet_fields.fields.EncryptedTextField(null=True)),
                ('enabled', models.BooleanField(default=True)),
                ('content_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
        ),
        migrations.CreateModel(
            name='GitRepository',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('url', models.URLField(max_length=255)),
                ('type', models.CharField(choices=[('Public', 'Public'), ('Private', 'Private'), ('Internal', 'Internal'), ('Forked', 'Forked'), ('Archived', 'Archived'), ('Mirrors', 'Mirrored')], default='Public', max_length=64)),
                ('scan_required', models.BooleanField(default=False, verbose_name='Scan required')),
                ('scan_priority', models.BooleanField(default=False, verbose_name='Scan priority')),
                ('sca', models.BooleanField(default=False, verbose_name='Dependency scanning')),
                ('sast', models.BooleanField(default=False, verbose_name='Static scanning')),
                ('sts', models.BooleanField(default=False, verbose_name='Secrets scanning')),
                ('active', models.BooleanField(default=True)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('integration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.integration')),
            ],
            options={
                'verbose_name': 'Git Repository',
                'verbose_name_plural': 'Git Repositories',
            },
        ),
        migrations.CreateModel(
            name='Finding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(blank=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('severity', models.IntegerField(blank=True, choices=[(1, 'Informative'), (2, 'Low'), (3, 'Medium'), (4, 'High'), (5, 'Critical')], db_index=True, null=True)),
                ('state', models.IntegerField(choices=[(1, 'New'), (2, 'Open'), (3, 'Closed'), (4, 'Resolved')], db_index=True, default=1)),
                ('first_seen', models.DateTimeField(auto_now_add=True)),
                ('last_seen_date', models.DateTimeField(blank=True, null=True)),
                ('application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.application', verbose_name='Application')),
                ('apps', models.ManyToManyField(related_name='_inventory_finding_apps_+', to='inventory.Application')),
                ('content_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('integration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.integration')),
                ('related_to', models.ManyToManyField(blank=True, help_text='Other findings related to this one', related_name='_inventory_finding_related_to_+', to='inventory.Finding')),
            ],
        ),
        migrations.AddField(
            model_name='application',
            name='dev_lead',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.person'),
        ),
        migrations.AddField(
            model_name='application',
            name='director',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.person'),
        ),
        migrations.AddField(
            model_name='application',
            name='director_direct',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.person'),
        ),
        migrations.AddField(
            model_name='application',
            name='git_repos',
            field=models.ManyToManyField(to='inventory.GitRepository'),
        ),
        migrations.AddField(
            model_name='application',
            name='managed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.person'),
        ),
        migrations.AddField(
            model_name='application',
            name='owned_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='inventory.person'),
        ),
    ]
